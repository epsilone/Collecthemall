package com.funcom.project.module.book.lib.Flipper{	import caurina.transitions.Tweener;	import com.funcom.project.module.book.event.BookEvent;	import com.funcom.project.module.book.lib.Flipper.event.PageFlipperEvent;	import com.funcom.project.module.book.struct.Page;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.display.Sprite;	import flash.geom.Point;		public class PageFlipper extends Sprite 	{		/************************************************************************************************************		* Static/Constant variables																					*		************************************************************************************************************/		/************************************************************************************************************		* Member Variables																							*		************************************************************************************************************/		//Reference holder		private var _frontPage:Page;		private var _backPage:Page;		private var _isGoingToLeft:Boolean;				//Config		private var _flipPoint:Point;				//Management				//Visual		private var _render:Shape;				/************************************************************************************************************		* Constructor / Init / Dispose																				*			************************************************************************************************************/		public function PageFlipper(aFrontPage:Page, aBackPage:Page, aIsGoingToLeft:Boolean = false) 		{			_frontPage = aFrontPage;			_backPage = aBackPage;			_isGoingToLeft = aIsGoingToLeft;						init();		}				private function init():void		{			if (!_isGoingToLeft)			{				_flipPoint = new Point(_frontPage.pageWidth, _frontPage.pageHeight);			}			else			{				_flipPoint = new Point(-_frontPage.pageWidth, _frontPage.pageHeight);			}			_render = new Shape();			addChild(_render);		}				public function destroy():void		{					}				/************************************************************************************************************		* Public Methods																							*		************************************************************************************************************/		public function start():void		{			drawPage();						if (_isGoingToLeft)			{				turnPageBack();			}			else			{				turnPageForward();			}		}				/************************************************************************************************************		* Private Methods																							*		************************************************************************************************************/		private function turnPageForward():void		{			Tweener.addTween(_flipPoint, {									x:-_frontPage.pageWidth,									y:_frontPage.pageHeight,									_bezier:{x:0, y:0},									time:1,									transition:"easeinoutexpo",									onUpdate:drawPage,									onComplete:onPageDone									});												dispatchEvent(new PageFlipperEvent(PageFlipperEvent.FLIPPING_STARTED, this));		}				private function turnPageBack():void		{            Tweener.addTween(_flipPoint, {									x:_frontPage.pageWidth,									y:_frontPage.pageHeight,									_bezier:{x:0, y:0},									time:1,									transition:"easeinoutexpo", 									onUpdate:drawPage,									onComplete:onPageDone									});												dispatchEvent(new PageFlipperEvent(PageFlipperEvent.FLIPPING_STARTED, this));        }				private function drawPage():void		{			var frontPageBitmapData:BitmapData = new BitmapData(_frontPage.pageWidth, _frontPage.pageHeight, true, 0);			var backPageBitmapData:BitmapData = new BitmapData(_frontPage.pageWidth, _frontPage.pageHeight, true, 0);						frontPageBitmapData.draw(_frontPage);			backPageBitmapData.draw(_backPage);						_render.graphics.clear()			var o:Object = PageFlip.computeFlip(_flipPoint,// flipped point												new Point(1,1),// of bottom-right corner												_frontPage.pageWidth,// size of the sheet												_frontPage.pageHeight,												true,// in horizontal mode												1);// sensibility to one			PageFlip.drawBitmapSheet(	o,// computeflip returned object										_render,// target										frontPageBitmapData,// bitmap page 0										backPageBitmapData);// bitmap page 1		}				/************************************************************************************************************		* Handler Methods																							*		************************************************************************************************************/		private function onPageDone():void		{			dispatchEvent(new PageFlipperEvent(PageFlipperEvent.FLIPPING_COMPLETED, this));		}				/************************************************************************************************************		* Getter/Setter Methods																						*		************************************************************************************************************/				public function get frontPage():Page 		{			return _frontPage;		}				public function get backPage():Page 		{			return _backPage;		}				public function get isGoingToLeft():Boolean 		{			return _isGoingToLeft;		}	}}